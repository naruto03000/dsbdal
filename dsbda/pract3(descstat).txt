import numpy as np
import pandas as pd

df = pd.read_csv("iris.csv")

df.head()

sepal_length	sepal_width	petal_length	petal_width	species
0	5.1	3.5	1.4	0.2	setosa
1	4.9	3.0	1.4	0.2	setosa
2	4.7	3.2	1.3	0.2	setosa
3	4.6	3.1	1.5	0.2	setosa
4	5.0	3.6	1.4	0.2	setosa

df.mean()

sepal_length    5.843333
sepal_width     3.054000
petal_length    3.758667
petal_width     1.198667
dtype: float64

df.loc[:,'sepal_width'].mean()
3.0540000000000007

df.mean(axis=1)[0:4]

0    2.550
1    2.375
2    2.350
3    2.350
dtype: float64

df.median()

sepal_length    5.80
sepal_width     3.00
petal_length    4.35
petal_width     1.30
dtype: float64

df.loc[:,'sepal_width'].median()

3.0

df.median(axis=1)[0:4]

0    2.45
1    2.20
2    2.25
3    2.30
dtype: float64

df.mode()

sepal_length	sepal_width	petal_length	petal_width	species
0	5.0	3.0	1.5	0.2	setosa
1	NaN	NaN	NaN	NaN	versicolor
2	NaN	NaN	NaN	NaN	virginica

df.loc[:,'sepal_length'].mode()

0    5.0
dtype: float64

df.min()

sepal_length       4.3
sepal_width          2
petal_length         1
petal_width        0.1
species         setosa
dtype: object

df.loc[:,'petal_width'].min(skipna = False)

0.10000000000000001

df.max()

sepal_length          7.9
sepal_width           4.4
petal_length          6.9
petal_width           2.5
species         virginica
dtype: object

df.loc[:,'petal_length'].min(skipna = False)

1.0

df.std()

sepal_length    0.828066
sepal_width     0.433594
petal_length    1.764420
petal_width     0.763161
dtype: float64

df.loc[:,'sepal_width'].std()

0.4335943113621737

df.std(axis=1)[0:4]

0    2.179449
1    2.036950
2    1.997498
3    1.912241
dtype: float64

df.groupby(['species'])['sepal_length'].mean()

species
setosa        5.006
versicolor    5.936
virginica     6.588
Name: sepal_length, dtype: float64

df_u=df.rename(columns= {'sepal_width':'Sepal_width'},inplace=False)
(df_u.groupby(['species']).Sepal_width.mean())

species
setosa        3.418
versicolor    2.770
virginica     2.974
Name: Sepal_width, dtype: float64

from sklearn import preprocessing
enc = preprocessing.OneHotEncoder()
enc_df = pd.DataFrame(enc.fit_transform(df[['sepal_length']]).toarray())
enc_df
df_encode =df_u.join(enc_df)
df_encode

sepal_length	Sepal_width	petal_length	petal_width	species	0	1	2	3
0	5.1	3.5	1.4	0.2	setosa	0.0	1.0	0.0	0.0
1	4.9	3.0	1.4	0.2	setosa	1.0	0.0	0.0	0.0
2	4.7	3.2	1.3	0.2	setosa	1.0	0.0	0.0	0.0
3	4.6	3.1	1.5	0.2	setosa	1.0	0.0	0.0	0.0
4	5.0	3.6	1.4	0.2	setosa	0.0	1.0	0.0	0.0
5	5.4	3.9	1.7	0.4	setosa	0.0	1.0	0.0	0.0
6	4.6	3.4	1.4	0.3	setosa	1.0	0.0	0.0	0.0
7	5.0	3.4	1.5	0.2	setosa	0.0	1.0	0.0	0.0
8	4.4	2.9	1.4	0.2	setosa	1.0	0.0	0.0	0.0
9	4.9	3.1	1.5	0.1	setosa	1.0	0.0	0.0	0.0
10	5.4	3.7	1.5	0.2	setosa	0.0	1.0	0.0	0.0
11	4.8	3.4	1.6	0.2	setosa	1.0	0.0	0.0	0.0
12	4.8	3.0	1.4	0.1	setosa	1.0	0.0	0.0	0.0
13	4.3	3.0	1.1	0.1	setosa	1.0	0.0	0.0	0.0
14	5.8	4.0	1.2	0.2	setosa	0.0	1.0	0.0	0.0
15	5.7	4.4	1.5	0.4	setosa	0.0	1.0	0.0	0.0
16	5.4	3.9	1.3	0.4	setosa	0.0	1.0	0.0	0.0
17	5.1	3.5	1.4	0.3	setosa	0.0	1.0	0.0	0.0
18	5.7	3.8	1.7	0.3	setosa	0.0	1.0	0.0	0.0
19	5.1	3.8	1.5	0.3	setosa	0.0	1.0	0.0	0.0
20	5.4	3.4	1.7	0.2	setosa	0.0	1.0	0.0	0.0
21	5.1	3.7	1.5	0.4	setosa	0.0	1.0	0.0	0.0
22	4.6	3.6	1.0	0.2	setosa	1.0	0.0	0.0	0.0
23	5.1	3.3	1.7	0.5	setosa	0.0	1.0	0.0	0.0
24	4.8	3.4	1.9	0.2	setosa	1.0	0.0	0.0	0.0
25	5.0	3.0	1.6	0.2	setosa	0.0	1.0	0.0	0.0
26	5.0	3.4	1.6	0.4	setosa	0.0	1.0	0.0	0.0
27	5.2	3.5	1.5	0.2	setosa	0.0	1.0	0.0	0.0
28	5.2	3.4	1.4	0.2	setosa	0.0	1.0	0.0	0.0
29	4.7	3.2	1.6	0.2	setosa	1.0	0.0	0.0	0.0
...	...	...	...	...	...	...	...	...	...
120	6.9	3.2	5.7	2.3	virginica	0.0	0.0	1.0	0.0
121	5.6	2.8	4.9	2.0	virginica	0.0	1.0	0.0	0.0
122	7.7	2.8	6.7	2.0	virginica	0.0	0.0	0.0	1.0
123	6.3	2.7	4.9	1.8	virginica	0.0	0.0	1.0	0.0
124	6.7	3.3	5.7	2.1	virginica	0.0	0.0	1.0	0.0
125	7.2	3.2	6.0	1.8	virginica	0.0	0.0	0.0	1.0
126	6.2	2.8	4.8	1.8	virginica	0.0	0.0	1.0	0.0
127	6.1	3.0	4.9	1.8	virginica	0.0	0.0	1.0	0.0
128	6.4	2.8	5.6	2.1	virginica	0.0	0.0	1.0	0.0
129	7.2	3.0	5.8	1.6	virginica	0.0	0.0	0.0	1.0
130	7.4	2.8	6.1	1.9	virginica	0.0	0.0	0.0	1.0
131	7.9	3.8	6.4	2.0	virginica	0.0	0.0	0.0	1.0
132	6.4	2.8	5.6	2.2	virginica	0.0	0.0	1.0	0.0
133	6.3	2.8	5.1	1.5	virginica	0.0	0.0	1.0	0.0
134	6.1	2.6	5.6	1.4	virginica	0.0	0.0	1.0	0.0
135	7.7	3.0	6.1	2.3	virginica	0.0	0.0	0.0	1.0
136	6.3	3.4	5.6	2.4	virginica	0.0	0.0	1.0	0.0
137	6.4	3.1	5.5	1.8	virginica	0.0	0.0	1.0	0.0
138	6.0	3.0	4.8	1.8	virginica	0.0	0.0	1.0	0.0
139	6.9	3.1	5.4	2.1	virginica	0.0	0.0	1.0	0.0
140	6.7	3.1	5.6	2.4	virginica	0.0	0.0	1.0	0.0
141	6.9	3.1	5.1	2.3	virginica	0.0	0.0	1.0	0.0
142	5.8	2.7	5.1	1.9	virginica	0.0	1.0	0.0	0.0
143	6.8	3.2	5.9	2.3	virginica	0.0	0.0	1.0	0.0
144	6.7	3.3	5.7	2.5	virginica	0.0	0.0	1.0	0.0
145	6.7	3.0	5.2	2.3	virginica	0.0	0.0	1.0	0.0
146	6.3	2.5	5.0	1.9	virginica	0.0	0.0	1.0	0.0
147	6.5	3.0	5.2	2.0	virginica	0.0	0.0	1.0	0.0
148	6.2	3.4	5.4	2.3	virginica	0.0	0.0	1.0	0.0
149	5.9	3.0	5.1	1.8	virginica	0.0	1.0	0.0	0.0
150 rows Ã— 9 columns

csv_url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
col_names = ['sepal_length','sepal_width','petal_length','petal_width','species']
iris = pd.read_csv(csv_url, names = col_names)
irisSet = (iris['species']== 'Iris-setosa')
print('Iris-setosa')
print(iris[irisSet].describe())

Iris-setosa
       sepal_length  sepal_width  petal_length  petal_width
count      50.00000    50.000000     50.000000     50.00000
mean        5.00600     3.418000      1.464000      0.24400
std         0.35249     0.381024      0.173511      0.10721
min         4.30000     2.300000      1.000000      0.10000
25%         4.80000     3.125000      1.400000      0.20000
50%         5.00000     3.400000      1.500000      0.20000
75%         5.20000     3.675000      1.575000      0.30000
max         5.80000     4.400000      1.900000      0.60000

irisVer = (iris['species']== 'Iris-versicolor')
print('Iris-versicolor')
print(iris[irisVer].describe())

Iris-versicolor
       sepal_length  sepal_width  petal_length  petal_width
count     50.000000    50.000000     50.000000    50.000000
mean       5.936000     2.770000      4.260000     1.326000
std        0.516171     0.313798      0.469911     0.197753
min        4.900000     2.000000      3.000000     1.000000
25%        5.600000     2.525000      4.000000     1.200000
50%        5.900000     2.800000      4.350000     1.300000
75%        6.300000     3.000000      4.600000     1.500000
max        7.000000     3.400000      5.100000     1.800000

irisVir = (iris['species']== 'Iris-virginica')
print('Iris-virginica')
print(iris[irisVir].describe())

Iris-virginica
       sepal_length  sepal_width  petal_length  petal_width
count      50.00000    50.000000     50.000000     50.00000
mean        6.58800     2.974000      5.552000      2.02600
std         0.63588     0.322497      0.551895      0.27465
min         4.90000     2.200000      4.500000      1.40000
25%         6.22500     2.800000      5.100000      1.80000
50%         6.50000     3.000000      5.550000      2.00000
75%         6.90000     3.175000      5.875000      2.30000
max         7.90000     3.800000      6.900000      2.50000
-----------------------------------------------------------------------------------------------------------
import numpy as np
import pandas as pd

df = pd.read_csv("employee_data.csv")

df.head()

Unnamed: 0	id	groups	age	healthy_eating	active_lifestyle	salary
0	0	0	A	36	5	5	2297
1	1	1	A	55	3	5	1134
2	2	2	A	61	8	1	4969
3	3	3	O	29	3	6	902
4	4	4	O	34	6	2	3574

df.mean()

Unnamed: 0           499.500
id                   499.500
age                   41.155
healthy_eating         4.944
active_lifestyle       5.683
salary              2227.461
dtype: float64

df.loc[:,'age'].mean()

41.155

df.mean(axis=1)[0:4]

0    390.500000
1    199.833333
2    840.500000
3    157.666667
dtype: float64

df.median()

Unnamed: 0           499.5
id                   499.5
age                   41.0
healthy_eating         5.0
active_lifestyle       6.0
salary              2174.0
dtype: float64

df.loc[:,'salary'].median()

2174.0

df.median(axis=1)[0:4]

0    5.0
1    4.0
2    5.0
3    4.5
dtype: float64

df.mode()

Unnamed: 0	id	groups	age	healthy_eating	active_lifestyle	salary
0	0	0	A	62.0	5.0	6.0	2646.0
1	1	1	O	NaN	NaN	NaN	NaN
2	2	2	NaN	NaN	NaN	NaN	NaN
3	3	3	NaN	NaN	NaN	NaN	NaN
4	4	4	NaN	NaN	NaN	NaN	NaN
5	5	5	NaN	NaN	NaN	NaN	NaN
6	6	6	NaN	NaN	NaN	NaN	NaN
7	7	7	NaN	NaN	NaN	NaN	NaN
8	8	8	NaN	NaN	NaN	NaN	NaN
9	9	9	NaN	NaN	NaN	NaN	NaN
10	10	10	NaN	NaN	NaN	NaN	NaN
11	11	11	NaN	NaN	NaN	NaN	NaN
12	12	12	NaN	NaN	NaN	NaN	NaN
13	13	13	NaN	NaN	NaN	NaN	NaN
14	14	14	NaN	NaN	NaN	NaN	NaN
15	15	15	NaN	NaN	NaN	NaN	NaN
16	16	16	NaN	NaN	NaN	NaN	NaN
17	17	17	NaN	NaN	NaN	NaN	NaN
18	18	18	NaN	NaN	NaN	NaN	NaN
19	19	19	NaN	NaN	NaN	NaN	NaN
20	20	20	NaN	NaN	NaN	NaN	NaN
21	21	21	NaN	NaN	NaN	NaN	NaN
22	22	22	NaN	NaN	NaN	NaN	NaN
23	23	23	NaN	NaN	NaN	NaN	NaN
24	24	24	NaN	NaN	NaN	NaN	NaN
25	25	25	NaN	NaN	NaN	NaN	NaN
26	26	26	NaN	NaN	NaN	NaN	NaN
27	27	27	NaN	NaN	NaN	NaN	NaN
28	28	28	NaN	NaN	NaN	NaN	NaN
29	29	29	NaN	NaN	NaN	NaN	NaN
...	...	...	...	...	...	...	...
970	970	970	NaN	NaN	NaN	NaN	NaN
971	971	971	NaN	NaN	NaN	NaN	NaN
972	972	972	NaN	NaN	NaN	NaN	NaN
973	973	973	NaN	NaN	NaN	NaN	NaN
974	974	974	NaN	NaN	NaN	NaN	NaN
975	975	975	NaN	NaN	NaN	NaN	NaN
976	976	976	NaN	NaN	NaN	NaN	NaN
977	977	977	NaN	NaN	NaN	NaN	NaN
978	978	978	NaN	NaN	NaN	NaN	NaN
979	979	979	NaN	NaN	NaN	NaN	NaN
980	980	980	NaN	NaN	NaN	NaN	NaN
981	981	981	NaN	NaN	NaN	NaN	NaN
982	982	982	NaN	NaN	NaN	NaN	NaN
983	983	983	NaN	NaN	NaN	NaN	NaN
984	984	984	NaN	NaN	NaN	NaN	NaN
985	985	985	NaN	NaN	NaN	NaN	NaN
986	986	986	NaN	NaN	NaN	NaN	NaN
987	987	987	NaN	NaN	NaN	NaN	NaN
988	988	988	NaN	NaN	NaN	NaN	NaN
989	989	989	NaN	NaN	NaN	NaN	NaN
990	990	990	NaN	NaN	NaN	NaN	NaN
991	991	991	NaN	NaN	NaN	NaN	NaN
992	992	992	NaN	NaN	NaN	NaN	NaN
993	993	993	NaN	NaN	NaN	NaN	NaN
994	994	994	NaN	NaN	NaN	NaN	NaN
995	995	995	NaN	NaN	NaN	NaN	NaN
996	996	996	NaN	NaN	NaN	NaN	NaN
997	997	997	NaN	NaN	NaN	NaN	NaN
998	998	998	NaN	NaN	NaN	NaN	NaN
999	999	999	NaN	NaN	NaN	NaN	NaN
1000 rows Ã— 7 columns

df.loc[:,'age'].mode()

0    62
dtype: int64

df.min()

Unnamed: 0            0
id                    0
groups                A
age                  18
healthy_eating        0
active_lifestyle      0
salary              553
dtype: object

df.loc[:,'age'].min(skipna = False)
18

df.max()

Unnamed: 0           999
id                   999
groups                 O
age                   64
healthy_eating        10
active_lifestyle      10
salary              5550
dtype: object

df.loc[:,'salary'].min(skipna = False)
553

df.std()

Unnamed: 0           288.819436
id                   288.819436
age                   13.462995
healthy_eating         2.013186
active_lifestyle       2.048587
salary              1080.209760
dtype: float64

df.loc[:,'age'].std()

13.46299473472478

df.std(axis=1)[0:4]

0     934.089236
1     458.130294
2    2022.677112
3     364.789071
dtype: float64

df.groupby(['groups'])['salary'].mean()

groups
A     2176.221333
AB    2261.688000
B     2232.776000
O     2265.520000
Name: salary, dtype: float64

df_u=df.rename(columns= {'salary':'income'},inplace=False)
(df_u.groupby(['groups']).income.mean())

groups
A     2176.221333
AB    2261.688000
B     2232.776000
O     2265.520000
Name: income, dtype: float64

from sklearn import preprocessing
enc = preprocessing.LabelEncoder()
df['groups'] = enc.fit_transform(df['groups'])
df1=df
df

Unnamed: 0	id	groups	age	healthy_eating	active_lifestyle	salary
0	0	0	0	36	5	5	2297
1	1	1	0	55	3	5	1134
2	2	2	0	61	8	1	4969
3	3	3	3	29	3	6	902
4	4	4	3	34	6	2	3574
5	5	5	3	42	5	3	2761
6	6	6	1	53	4	6	1484
7	7	7	2	41	8	6	3809
8	8	8	0	47	5	6	2065
9	9	9	0	31	4	8	1020
10	10	10	0	47	6	9	1950
11	11	11	3	40	7	1	4387
12	12	12	3	41	3	2	1830
13	13	13	3	46	6	8	2182
14	14	14	1	51	7	5	3460
15	15	15	2	57	3	8	662
16	16	16	0	33	3	5	1134
17	17	17	0	41	4	8	1020
18	18	18	0	46	2	6	779
19	19	19	3	32	7	6	3228
20	20	20	3	57	7	6	3228
21	21	21	3	26	1	6	1360
22	22	22	1	59	7	5	3460
23	23	23	2	55	6	4	3110
24	24	24	0	51	5	8	1601
25	25	25	0	63	6	7	2414
26	26	26	0	62	9	6	4390
27	27	27	3	37	3	5	1134
28	28	28	3	63	6	7	2414
29	29	29	3	20	8	6	3809
...	...	...	...	...	...	...	...
970	970	970	0	36	4	8	1020
971	971	971	3	33	2	8	1243
972	972	972	3	56	6	3	3342
973	973	973	3	47	3	6	902
974	974	974	1	64	10	5	5204
975	975	975	2	43	4	6	1484
976	976	976	0	20	6	4	3110
977	977	977	0	59	2	6	779
978	978	978	0	61	3	6	902
979	979	979	3	18	7	8	2764
980	980	980	3	58	5	5	2297
981	981	981	3	31	5	9	1369
982	982	982	1	50	9	5	4622
983	983	983	2	29	5	6	2065
984	984	984	0	32	3	9	894
985	985	985	0	52	4	3	2179
986	986	986	0	27	6	7	2414
987	987	987	3	50	5	5	2297
988	988	988	3	60	4	6	1484
989	989	989	3	44	3	5	1134
990	990	990	1	20	3	4	1366
991	991	991	2	38	8	6	3809
992	992	992	0	30	6	3	3342
993	993	993	0	56	5	5	2297
994	994	994	0	52	5	7	1833
995	995	995	3	33	7	7	2996
996	996	996	3	21	1	2	667
997	997	997	3	49	9	7	4158
998	998	998	1	56	6	7	2414
999	999	999	2	64	4	9	788
1000 rows Ã— 7 columns

from sklearn import preprocessing
enc = preprocessing.OneHotEncoder()
enc_df = pd.DataFrame(enc.fit_transform(df[['groups']]).toarray())
df_encode =df_u.join(enc_df)
df_encode

Unnamed: 0	id	groups	age	healthy_eating	active_lifestyle	income	0	1	2	3
0	0	0	A	36	5	5	2297	1.0	0.0	0.0	0.0
1	1	1	A	55	3	5	1134	1.0	0.0	0.0	0.0
2	2	2	A	61	8	1	4969	1.0	0.0	0.0	0.0
3	3	3	O	29	3	6	902	0.0	0.0	0.0	1.0
4	4	4	O	34	6	2	3574	0.0	0.0	0.0	1.0
5	5	5	O	42	5	3	2761	0.0	0.0	0.0	1.0
6	6	6	AB	53	4	6	1484	0.0	1.0	0.0	0.0
7	7	7	B	41	8	6	3809	0.0	0.0	1.0	0.0
8	8	8	A	47	5	6	2065	1.0	0.0	0.0	0.0
9	9	9	A	31	4	8	1020	1.0	0.0	0.0	0.0
10	10	10	A	47	6	9	1950	1.0	0.0	0.0	0.0
11	11	11	O	40	7	1	4387	0.0	0.0	0.0	1.0
12	12	12	O	41	3	2	1830	0.0	0.0	0.0	1.0
13	13	13	O	46	6	8	2182	0.0	0.0	0.0	1.0
14	14	14	AB	51	7	5	3460	0.0	1.0	0.0	0.0
15	15	15	B	57	3	8	662	0.0	0.0	1.0	0.0
16	16	16	A	33	3	5	1134	1.0	0.0	0.0	0.0
17	17	17	A	41	4	8	1020	1.0	0.0	0.0	0.0
18	18	18	A	46	2	6	779	1.0	0.0	0.0	0.0
19	19	19	O	32	7	6	3228	0.0	0.0	0.0	1.0
20	20	20	O	57	7	6	3228	0.0	0.0	0.0	1.0
21	21	21	O	26	1	6	1360	0.0	0.0	0.0	1.0
22	22	22	AB	59	7	5	3460	0.0	1.0	0.0	0.0
23	23	23	B	55	6	4	3110	0.0	0.0	1.0	0.0
24	24	24	A	51	5	8	1601	1.0	0.0	0.0	0.0
25	25	25	A	63	6	7	2414	1.0	0.0	0.0	0.0
26	26	26	A	62	9	6	4390	1.0	0.0	0.0	0.0
27	27	27	O	37	3	5	1134	0.0	0.0	0.0	1.0
28	28	28	O	63	6	7	2414	0.0	0.0	0.0	1.0
29	29	29	O	20	8	6	3809	0.0	0.0	0.0	1.0
...	...	...	...	...	...	...	...	...	...	...	...
970	970	970	A	36	4	8	1020	1.0	0.0	0.0	0.0
971	971	971	O	33	2	8	1243	0.0	0.0	0.0	1.0
972	972	972	O	56	6	3	3342	0.0	0.0	0.0	1.0
973	973	973	O	47	3	6	902	0.0	0.0	0.0	1.0
974	974	974	AB	64	10	5	5204	0.0	1.0	0.0	0.0
975	975	975	B	43	4	6	1484	0.0	0.0	1.0	0.0
976	976	976	A	20	6	4	3110	1.0	0.0	0.0	0.0
977	977	977	A	59	2	6	779	1.0	0.0	0.0	0.0
978	978	978	A	61	3	6	902	1.0	0.0	0.0	0.0
979	979	979	O	18	7	8	2764	0.0	0.0	0.0	1.0
980	980	980	O	58	5	5	2297	0.0	0.0	0.0	1.0
981	981	981	O	31	5	9	1369	0.0	0.0	0.0	1.0
982	982	982	AB	50	9	5	4622	0.0	1.0	0.0	0.0
983	983	983	B	29	5	6	2065	0.0	0.0	1.0	0.0
984	984	984	A	32	3	9	894	1.0	0.0	0.0	0.0
985	985	985	A	52	4	3	2179	1.0	0.0	0.0	0.0
986	986	986	A	27	6	7	2414	1.0	0.0	0.0	0.0
987	987	987	O	50	5	5	2297	0.0	0.0	0.0	1.0
988	988	988	O	60	4	6	1484	0.0	0.0	0.0	1.0
989	989	989	O	44	3	5	1134	0.0	0.0	0.0	1.0
990	990	990	AB	20	3	4	1366	0.0	1.0	0.0	0.0
991	991	991	B	38	8	6	3809	0.0	0.0	1.0	0.0
992	992	992	A	30	6	3	3342	1.0	0.0	0.0	0.0
993	993	993	A	56	5	5	2297	1.0	0.0	0.0	0.0
994	994	994	A	52	5	7	1833	1.0	0.0	0.0	0.0
995	995	995	O	33	7	7	2996	0.0	0.0	0.0	1.0
996	996	996	O	21	1	2	667	0.0	0.0	0.0	1.0
997	997	997	O	49	9	7	4158	0.0	0.0	0.0	1.0
998	998	998	AB	56	6	7	2414	0.0	1.0	0.0	0.0
999	999	999	B	64	4	9	788	0.0	0.0	1.0	0.0
1000 rows Ã— 11 columns

iris = pd.read_csv("iris.csv")
iris.head()

sepal_length	sepal_width	petal_length	petal_width	species
0	5.1	3.5	1.4	0.2	setosa
1	4.9	3.0	1.4	0.2	setosa
2	4.7	3.2	1.3	0.2	setosa
3	4.6	3.1	1.5	0.2	setosa
4	5.0	3.6	1.4	0.2	setosa

irisSet = (iris['species']== 'setosa')
print('setosa')
print(iris[irisSet].describe())

setosa
       sepal_length  sepal_width  petal_length  petal_width
count      50.00000    50.000000     50.000000     50.00000
mean        5.00600     3.418000      1.464000      0.24400
std         0.35249     0.381024      0.173511      0.10721
min         4.30000     2.300000      1.000000      0.10000
25%         4.80000     3.125000      1.400000      0.20000
50%         5.00000     3.400000      1.500000      0.20000
75%         5.20000     3.675000      1.575000      0.30000
max         5.80000     4.400000      1.900000      0.60000

irisVer = (iris['species']== 'versicolor')
print('versicolor')
print(iris[irisVer].describe())

versicolor
       sepal_length  sepal_width  petal_length  petal_width
count     50.000000    50.000000     50.000000    50.000000
mean       5.936000     2.770000      4.260000     1.326000
std        0.516171     0.313798      0.469911     0.197753
min        4.900000     2.000000      3.000000     1.000000
25%        5.600000     2.525000      4.000000     1.200000
50%        5.900000     2.800000      4.350000     1.300000
75%        6.300000     3.000000      4.600000     1.500000
max        7.000000     3.400000      5.100000     1.800000

irisVir = (iris['species']== 'virginica')
print('virginica')
print(iris[irisVir].describe())

Iris-virginica
       sepal_length  sepal_width  petal_length  petal_width
count           0.0          0.0           0.0          0.0
mean            NaN          NaN           NaN          NaN
std             NaN          NaN           NaN          NaN
min             NaN          NaN           NaN          NaN
25%             NaN          NaN           NaN          NaN
50%             NaN          NaN           NaN          NaN
75%             NaN          NaN           NaN          NaN
max             NaN          NaN           NaN          NaN